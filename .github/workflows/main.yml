name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-push-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Create .env file
        run: |
          echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> .env
          echo "CONNECTION_URL=${{ secrets.CONNECTION_URL }}" >> .env

      - name: Build and push images
        run: |
          docker compose build --push

  provision-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      frontend_ip: ${{ steps.terraform_outputs.outputs.frontend_ip }}
      backend_ip: ${{ steps.terraform_outputs.outputs.backend_ip }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create SSH Key File
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_private_key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          echo "frontend_ip=$(terraform output -raw frontend_ip)" >> $GITHUB_OUTPUT
          echo "backend_ip=$(terraform output -raw backend_ip)" >> $GITHUB_OUTPUT

  configure-and-deploy-app:
    needs: [provision-infrastructure]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install ansible -y

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 Hosts to Known Hosts
        run: |
          ssh-keyscan -H ${{ needs.provision-infrastructure.outputs.frontend_ip }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ needs.provision-infrastructure.outputs.backend_ip }} >> ~/.ssh/known_hosts

      - name: Create Dynamic Ansible Inventory File
        run: |
          echo "[frontend]" > inventory
          echo "${{ needs.provision-infrastructure.outputs.frontend_ip }}" >> inventory
          echo "[backend]" >> inventory
          echo "${{ needs.provision-infrastructure.outputs.backend_ip }}" >> inventory

      - name: Run Ansible Playbook
        run: ansible-playbook deploy.yml --inventory inventory
