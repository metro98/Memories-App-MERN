name: CI/CD Pipeline

on:
  workflow_dispatch: # Trigger manually

jobs:
  build-and-push-docker-images:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Step 3: Build and push backend image
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/memories-backend ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/memories-backend

      # Step 4: Build and push frontend image
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/memories-frontend ./client
          docker push ${{ secrets.DOCKER_USERNAME }}/memories-frontend


  provision-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code for Terraform files
        uses: actions/checkout@v3

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: echo "AWS credentials configured"

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve

  configure-and-deploy-app:
    runs-on: ubuntu-latest

    steps:
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install ansible -y

      # Step 1: Configure SSH Private Key
      - name: Configure SSH Key for EC2 Access
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 2: Add EC2 Hosts to Known Hosts (to avoid interactive prompt)
      - name: Add EC2 Hosts to Known Hosts
        run: |
          ssh-keyscan -H ${{ steps.terraform_outputs.outputs.frontend_ip }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ steps.terraform_outputs.outputs.backend_ip }} >> ~/.ssh/known_hosts

      # Step 3: Get Terraform Outputs (Frontend and Backend IPs)
      - name: Get Terraform outputs
        id: terraform_outputs
        run: |
          FRONTEND_IP=$(terraform output -raw frontend_ip)
          BACKEND_IP=$(terraform output -raw backend_ip)
          echo "::set-output name=frontend_ip::$FRONTEND_IP"
          echo "::set-output name=backend_ip::$BACKEND_IP"

      # Step 4: Create Dynamic Ansible Inventory File with EC2 IPs
      - name: Create Dynamic Ansible Inventory File
        run: |
          echo "[frontend]" > inventory
          echo "${{ steps.terraform_outputs.outputs.frontend_ip }}" >> inventory
          echo "[backend]" >> inventory
          echo "${{ steps.terraform_outputs.outputs.backend_ip }}" >> inventory

      # Step 5: Run Ansible Playbook for Configuration and Deployment
      - name: Run Ansible Playbook to Deploy Application on EC2 Instances
        run: ansible-playbook deploy.yml --inventory inventory
